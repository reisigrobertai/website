<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bitcoin Monitor</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #0f0c29 0%, #302b63 50%, #24243e 100%);
            min-height: 100vh;
            color: #ffffff;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 50px;
            padding-top: 30px;
        }

        .header h1 {
            font-size: 3rem;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
            text-shadow: 0 0 30px rgba(102, 126, 234, 0.5);
        }

        .header .subtitle {
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.1rem;
            font-weight: 300;
        }

        .update-section {
            text-align: center;
            margin-bottom: 40px;
        }

        .update-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 18px 50px;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 50px;
            cursor: pointer;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .update-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s;
        }

        .update-btn:hover::before {
            left: 100%;
        }

        .update-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.6);
        }

        .update-btn:active {
            transform: translateY(-1px);
        }

        .update-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .loading {
            display: none;
            color: rgba(255, 255, 255, 0.8);
            margin-top: 15px;
            font-size: 0.95rem;
        }

        .loading.active {
            display: block;
            animation: pulse 1.5s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .last-update {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
            margin-top: 15px;
        }

        .error-banner {
            background: rgba(255, 71, 87, 0.2);
            border: 1px solid rgba(255, 71, 87, 0.5);
            border-radius: 12px;
            padding: 15px 20px;
            margin-bottom: 30px;
            display: none;
            backdrop-filter: blur(10px);
        }

        .error-banner.active {
            display: block;
        }

        .error-banner h3 {
            color: #ff4757;
            font-size: 1rem;
            margin-bottom: 8px;
        }

        .error-banner ul {
            list-style: none;
            padding-left: 0;
        }

        .error-banner li {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
            padding: 3px 0;
        }

        .data-container {
            display: none;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-top: 40px;
        }

        .data-container.active {
            display: grid;
        }

        .card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 30px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(102, 126, 234, 0.3);
            border-color: rgba(102, 126, 234, 0.5);
        }

        .card h2 {
            font-size: 1.4rem;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid rgba(102, 126, 234, 0.5);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .data-row {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            padding: 15px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .data-row:last-child {
            border-bottom: none;
        }

        .data-label {
            color: rgba(255, 255, 255, 0.6);
            font-weight: 500;
            font-size: 0.95rem;
            flex: 0 0 45%;
        }

        .data-value {
            color: #ffffff;
            font-weight: 600;
            text-align: right;
            word-break: break-all;
            flex: 1;
            font-size: 0.95rem;
        }

        .data-value.highlight {
            color: #667eea;
            font-size: 1.1rem;
        }

        .hash {
            font-family: 'Courier New', monospace;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.85rem;
            font-weight: 600;
        }

        .badge.success {
            background: rgba(46, 213, 115, 0.2);
            color: #2ed573;
            border: 1px solid rgba(46, 213, 115, 0.3);
        }

        .badge.warning {
            background: rgba(255, 168, 1, 0.2);
            color: #ffa801;
            border: 1px solid rgba(255, 168, 1, 0.3);
        }

        .badge.info {
            background: rgba(102, 126, 234, 0.2);
            color: #667eea;
            border: 1px solid rgba(102, 126, 234, 0.3);
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: rgba(255, 255, 255, 0.5);
        }

        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.3;
        }

        .empty-state p {
            font-size: 1.1rem;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2.2rem;
            }

            .header .subtitle {
                font-size: 1rem;
            }

            .card {
                padding: 20px;
            }

            .data-container {
                grid-template-columns: 1fr;
            }

            .update-btn {
                padding: 15px 40px;
                font-size: 1rem;
            }
        }

        @media (max-width: 480px) {
            .header h1 {
                font-size: 1.8rem;
            }

            .data-row {
                flex-direction: column;
                gap: 8px;
            }

            .data-label {
                flex: none;
            }

            .data-value {
                text-align: left;
            }
        }

        .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚ö° Bitcoin Monitor</h1>
            <p class="subtitle">Real-time blockchain data from Bitcoin Core</p>
        </div>

        <div class="update-section">
            <button class="update-btn" onclick="fetchBitcoinData()">
                <span id="btnText">Update Data</span>
            </button>
            <div class="loading">
                <span>Fetching data from blockchain</span>
                <span class="spinner"></span>
            </div>
            <div class="last-update" id="lastUpdate"></div>
        </div>

        <div class="error-banner" id="errorBanner">
            <h3>‚ö†Ô∏è Partial Data Retrieved</h3>
            <ul id="errorList"></ul>
        </div>

        <div id="emptyState" class="empty-state">
            <div class="empty-state-icon">üîç</div>
            <p>Click "Update Data" to fetch Bitcoin blockchain information</p>
        </div>

        <div class="data-container" id="dataContainer">
            <!-- Blockchain Info Card -->
            <div class="card">
                <h2>üìä Blockchain Info</h2>
                <div class="data-row">
                    <span class="data-label">Block Height</span>
                    <span class="data-value highlight" id="blockHeight">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Network</span>
                    <span class="data-value" id="chain">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Difficulty</span>
                    <span class="data-value" id="difficulty">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Network Hashrate</span>
                    <span class="data-value" id="hashrate">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Verification Progress</span>
                    <span class="data-value" id="verificationProgress">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Chain Size</span>
                    <span class="data-value" id="chainSize">-</span>
                </div>
            </div>

            <!-- Latest Block Card -->
            <div class="card">
                <h2>üîó Latest Block</h2>
                <div class="data-row">
                    <span class="data-label">Height</span>
                    <span class="data-value highlight" id="blockHeightLatest">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Timestamp</span>
                    <span class="data-value" id="blockTime">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Transactions</span>
                    <span class="data-value" id="txCount">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Size</span>
                    <span class="data-value" id="blockSize">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Weight</span>
                    <span class="data-value" id="blockWeight">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Confirmations</span>
                    <span class="data-value" id="confirmations">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Block Hash</span>
                    <span class="data-value hash" id="blockHash">-</span>
                </div>
            </div>

            <!-- Mempool Card -->
            <div class="card">
                <h2>üíæ Mempool</h2>
                <div class="data-row">
                    <span class="data-label">Pending Transactions</span>
                    <span class="data-value highlight" id="mempoolSize">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Memory Usage</span>
                    <span class="data-value" id="mempoolUsage">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Total Bytes</span>
                    <span class="data-value" id="mempoolBytes">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Max Mempool</span>
                    <span class="data-value" id="maxMempool">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Min Fee Rate</span>
                    <span class="data-value" id="mempoolMinFee">-</span>
                </div>
                <div class="data-row">
                    <span class="data-label">Status</span>
                    <span class="data-value" id="mempoolLoaded">-</span>
                </div>
            </div>

            <!-- Chain Tips Card -->
            <div class="card">
                <h2>üåê Chain Tips</h2>
                <div id="chainTipsContainer">
                    <p style="color: rgba(255, 255, 255, 0.5); text-align: center;">No data</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ‚ö†Ô∏è CONFIGURATION - CHANGE THIS TO YOUR BACKEND URL
        const BACKEND_API_URL = 'http://uscos08088cg08cwkccw4gss.195.201.114.43.sslip.io';
        // Example: const BACKEND_API_URL = 'https://bitcoin-api.yourdomain.com/api/bitcoin-data';

        function formatNumber(num) {
            if (!num && num !== 0) return '-';
            return num.toLocaleString();
        }

        function formatBytes(bytes) {
            if (!bytes && bytes !== 0) return '-';
            const units = ['B', 'KB', 'MB', 'GB', 'TB'];
            let size = bytes;
            let unitIndex = 0;
            
            while (size >= 1024 && unitIndex < units.length - 1) {
                size /= 1024;
                unitIndex++;
            }
            
            return size.toFixed(2) + ' ' + units[unitIndex];
        }

        function formatHashrate(hashps) {
            if (!hashps && hashps !== 0) return '-';
            const eh = hashps / 1e18;
            return eh.toFixed(2) + ' EH/s';
        }

        function formatTimestamp(timestamp) {
            if (!timestamp) return '-';
            const date = new Date(timestamp * 1000);
            return date.toLocaleString();
        }

        function formatDifficulty(diff) {
            if (!diff && diff !== 0) return '-';
            return (diff / 1e12).toFixed(2) + 'T';
        }

        function formatPercentage(value) {
            if (!value && value !== 0) return '-';
            return (value * 100).toFixed(2) + '%';
        }

        async function fetchBitcoinData() {
            const btn = document.querySelector('.update-btn');
            const btnText = document.getElementById('btnText');
            const loading = document.querySelector('.loading');
            const errorBanner = document.getElementById('errorBanner');
            const errorList = document.getElementById('errorList');
            const dataContainer = document.getElementById('dataContainer');
            const emptyState = document.getElementById('emptyState');

            btn.disabled = true;
            btnText.textContent = 'Loading...';
            loading.classList.add('active');
            errorBanner.classList.remove('active');
            errorList.innerHTML = '';

            try {
                const response = await fetch(BACKEND_API_URL);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();

                // Handle errors
                if (data.errors && data.errors.length > 0) {
                    data.errors.forEach(error => {
                        const li = document.createElement('li');
                        li.textContent = error;
                        errorList.appendChild(li);
                    });
                    errorBanner.classList.add('active');
                }

                // Update blockchain info
                if (data.blockchain) {
                    document.getElementById('blockHeight').textContent = formatNumber(data.blockchain.height);
                    document.getElementById('chain').textContent = data.blockchain.chain || '-';
                    document.getElementById('difficulty').textContent = formatDifficulty(data.blockchain.difficulty);
                    document.getElementById('hashrate').textContent = formatHashrate(data.blockchain.networkHashrate);
                    document.getElementById('verificationProgress').textContent = formatPercentage(data.blockchain.verificationProgress);
                    document.getElementById('chainSize').textContent = formatBytes(data.blockchain.sizeOnDisk);
                }

                // Update latest block
                if (data.latestBlock) {
                    const block = data.latestBlock;
                    document.getElementById('blockHeightLatest').textContent = formatNumber(block.height);
                    document.getElementById('blockTime').textContent = formatTimestamp(block.time);
                    document.getElementById('txCount').textContent = formatNumber(block.txCount);
                    document.getElementById('blockSize').textContent = formatBytes(block.size);
                    document.getElementById('blockWeight').textContent = formatNumber(block.weight);
                    document.getElementById('confirmations').textContent = formatNumber(block.confirmations);
                    document.getElementById('blockHash').textContent = block.hash || '-';
                }

                // Update mempool
                if (data.mempool) {
                    const mempool = data.mempool;
                    document.getElementById('mempoolSize').textContent = formatNumber(mempool.size);
                    document.getElementById('mempoolUsage').textContent = formatBytes(mempool.usage);
                    document.getElementById('mempoolBytes').textContent = formatBytes(mempool.bytes);
                    document.getElementById('maxMempool').textContent = formatBytes(mempool.maxmempool);
                    document.getElementById('mempoolMinFee').textContent = mempool.mempoolminfee ? 
                        mempool.mempoolminfee.toFixed(8) + ' BTC/kB' : '-';
                    
                    const loadedBadge = mempool.loaded ? 
                        '<span class="badge success">Loaded</span>' : 
                        '<span class="badge warning">Loading</span>';
                    document.getElementById('mempoolLoaded').innerHTML = loadedBadge;
                }

                // Update chain tips
                const chainTipsContainer = document.getElementById('chainTipsContainer');
                if (data.chainTips && data.chainTips.length > 0) {
                    chainTipsContainer.innerHTML = '';
                    data.chainTips.forEach((tip, index) => {
                        const tipDiv = document.createElement('div');
                        tipDiv.className = 'data-row';
                        
                        const statusBadge = tip.status === 'active' ? 
                            '<span class="badge success">Active</span>' : 
                            '<span class="badge info">' + tip.status + '</span>';
                        
                        tipDiv.innerHTML = `
                            <span class="data-label">Tip ${index + 1} (${tip.height})</span>
                            <span class="data-value">${statusBadge}</span>
                        `;
                        chainTipsContainer.appendChild(tipDiv);
                    });
                } else {
                    chainTipsContainer.innerHTML = '<p style="color: rgba(255, 255, 255, 0.5); text-align: center;">No chain tips available</p>';
                }

                // Update last update time
                const now = new Date();
                document.getElementById('lastUpdate').textContent = 
                    'Last updated: ' + now.toLocaleTimeString();

                // Show data container, hide empty state
                emptyState.style.display = 'none';
                dataContainer.classList.add('active');

            } catch (error) {
                errorBanner.classList.add('active');
                errorList.innerHTML = `<li>Failed to fetch data: ${error.message}</li>`;
                console.error('Error fetching Bitcoin data:', error);
            } finally {
                btn.disabled = false;
                btnText.textContent = 'Update Data';
                loading.classList.remove('active');
            }
        }
    </script>
</body>
</html>
